tosca_definitions_version: cloudify_dsl_1_3

description: >
  The blueprint describes an OpenStack vm created using Cloudify's OpenStack plugin
  and simple web server started using Cloudify's script plugin.
  This blueprint will attempt to pull an OpenStack floating IP (rather than creating one),
  and also recycle an existing security group and keypair.
  Note that Cloudify 3.4 seems to require the v2 Keystone URL to function.
  Base code stolen from the cloudify-hello-world example at
  https://github.com/cloudify-examples/cloudify-hello-world-example

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4.2/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/1.4/plugin.yaml

inputs:
  webserver_port:
    description: The HTTP web server port
    default: 8080
  agent_user:
    description: User name used when SSH-ing into the started machine
  image:
    description: Openstack image name or id to use for the new server
  flavor:
    description: Openstack flavor name or id to use for the new server
  network_name:
    description: Openstack network name the new server will be connected to
  floating_ip_address:
    description: The id of the network to use for allocating a floating ip
  key_pair_name:
    description: Openstack key pair name of the key to associate with the new server
  security_group_name:
    description: Openstack Security Group name to use for the deployed VM
  private_key_path:
    description: |
      Path to the private key which will be used for connecting to the server
      on the manager or machine running CLI if running in local mode.
  keystone_username:
    description: |
      Username to authenticate to Keystone with.
    type: string
    default: ''
  keystone_password:
    description: |
      KeyStone password.
    type: string
    default: ''
  keystone_tenant_name:
    description: |
      Name of tenant to operate on.
    type: string
    default: ''
  keystone_url:
    description: |
      URL for KeyStone.
    type: string
    default: ''
  region:
    description: |
      OpenStack region to use.
    type: string
    default: ''

dsl_definitions:
  openstack_configuration: &openstack_configuration
    username: { get_input: keystone_username }
    password: { get_input: keystone_password }
    tenant_name: { get_input: keystone_tenant_name }
    auth_url: { get_input: keystone_url }
    region: { get_input: region }

node_types:
  SimpleWebServer:
    derived_from: cloudify.nodes.WebServer
    properties:
      port:
        description: Port to connect web server host to
        type: string
        default: { get_input: webserver_port }
    interfaces:
      cloudify.interfaces.lifecycle:
        configure: scripts/configure.sh
        start: scripts/start.sh
        stop: scripts/stop.sh
      custom_interface:
        dump_to_temp_file:
          implementation: scripts/dump_to_temp.sh
          inputs:
            log_message:
              type: string
              description: Log message to be written; toy example appends to a file hardcoded in the script.
              # NOTE: Cloudify expects this operation to define a value either here as a default, or in any
              # instantiating node_templates (where it may be pulled from anything known at that point of
              # the lifecycle). You can send in a custom value without implementing a custom workflow by
              # using the "execute_operations" workflow and passing in the "allow_kwargs_override" flag to
              # "true" and the "operation_kwargs" map to whatever your actual arguments are. For this specific
              # blueprint, an operation parameters YAML file could include:
              # allow_kwargs_override: true
              # operation_kwargs:
              #   log_message: 'Your log message here'
              default: ''

node_templates:

  virtual_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_configuration
      use_external_resource: true
      resource_id: { get_input: floating_ip_address }

  security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_configuration
      use_external_resource: true
      resource_id: { get_input: security_group_name}

  keypair:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      openstack_config: *openstack_configuration
      use_external_resource: true
      resource_id: { get_input: key_pair_name }
      private_key_path: { get_input: private_key_path }

  vm:
    type: cloudify.openstack.nodes.Server
    properties:
      openstack_config: *openstack_configuration
      agent_config:
        user: { get_input: agent_user }
        key: { get_property: [ keypair, private_key_path ] }
      image: { get_input: image }
      flavor: { get_input: flavor }
      management_network_name: { get_input: network_name }
    relationships:
      - { type: cloudify.openstack.server_connected_to_keypair, target: keypair }
      - { type: cloudify.openstack.server_connected_to_floating_ip, target: virtual_ip }
      - { type: cloudify.openstack.server_connected_to_security_group, target: security_group }
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          inputs:
            args:
              security_groups: [{ get_attribute: [ security_group, external_name ]}]

  http_web_server:
    type: SimpleWebServer
    properties:
      port: { get_input: webserver_port }
    relationships:
      - { type: cloudify.relationships.contained_in, target: vm }

outputs:
  http_endpoint:
    description: Web server external endpoint
    value: { concat: ['http://', { get_attribute: [virtual_ip, floating_ip_address] },
                      ':', { get_property: [http_web_server, port] }] }
